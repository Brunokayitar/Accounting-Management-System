# PostgreSQL Deployment for Rwanda AMS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: rwanda-ams
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp2

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: rwanda-ams
  labels:
    app: postgres
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: rwanda-ams-config
              key: DB_NAME
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: rwanda-ams-secrets
              key: DB_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rwanda-ams-secrets
              key: DB_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-initdb
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        args:
        - postgres
        - -c
        - max_connections=200
        - -c
        - shared_preload_libraries=pg_stat_statements
        - -c
        - track_activity_query_size=2048
        - -c
        - pg_stat_statements.track=all
        - -c
        - log_min_duration_statement=100
        - -c
        - checkpoint_completion_target=0.9
        - -c
        - wal_buffers=16MB
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-initdb
        configMap:
          name: postgres-initdb-config

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: rwanda-ams
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres

---
# ConfigMap for PostgreSQL initialization scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb-config
  namespace: rwanda-ams
  labels:
    app: postgres
data:
  01-init.sql: |
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "btree_gist";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    
    -- Create additional databases if needed
    -- Rwanda AMS main database is created by POSTGRES_DB env var
    
    -- Grant necessary permissions
    GRANT ALL PRIVILEGES ON DATABASE rwanda_ams TO rwanda_ams_user;
    
  02-monitoring.sql: |
    -- Create monitoring user for database metrics
    CREATE USER postgres_exporter WITH PASSWORD 'CHANGE_THIS_PASSWORD';
    GRANT CONNECT ON DATABASE rwanda_ams TO postgres_exporter;
    GRANT pg_monitor TO postgres_exporter;
