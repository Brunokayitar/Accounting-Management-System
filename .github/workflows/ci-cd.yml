# Rwanda AMS CI/CD Pipeline
# Automated testing, building, and deployment workflow

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rwanda-ams

jobs:
  # ============================================================================
  # CODE QUALITY AND TESTING
  # ============================================================================

  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Setup test database
        run: |
          PGPASSWORD=test_password psql -h localhost -U test_user -d test_db -f schema/001_init.sql
          PGPASSWORD=test_password psql -h localhost -U test_user -d test_db -f schema/002_seed_data.sql
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run unit tests
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key_for_ci
          SESSION_SECRET: test_session_secret

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key_for_ci

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/typescript
            p/react
            p/nodejs

  # ============================================================================
  # BUILD AND PUBLISH DOCKER IMAGE
  # ============================================================================

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: "sarif"
          output: "trivy-image-results.sarif"

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-image-results.sarif"

  # ============================================================================
  # DEPLOYMENT TO STAGING
  # ============================================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.rwanda-ams.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region us-east-1 --name rwanda-ams-staging

      - name: Deploy to staging
        run: |
          # Update image tag in deployment
          sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image-tag }}|g" k8s/deployment.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/pvc.yaml
          kubectl apply -f k8s/postgres.yaml
          kubectl apply -f k8s/deployment.yaml

          # Wait for deployment to complete
          kubectl rollout status deployment/rwanda-ams-app -n rwanda-ams --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app=rwanda-ams -n rwanda-ams --timeout=300s

          # Get service URL
          SERVICE_URL=$(kubectl get svc rwanda-ams-service -n rwanda-ams -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          # Run health check
          curl -f http://$SERVICE_URL/api/health || exit 1

          # Run basic API tests
          npm run test:smoke -- --baseUrl=http://$SERVICE_URL

  # ============================================================================
  # DEPLOYMENT TO PRODUCTION
  # ============================================================================

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://ams.rwanda.gov.rw

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region us-east-1 --name rwanda-ams-production

      - name: Create database backup
        run: |
          kubectl exec -n rwanda-ams deployment/postgres -- pg_dump -U $DB_USER -d $DB_NAME > backup-$(date +%Y%m%d-%H%M%S).sql
          aws s3 cp backup-*.sql s3://rwanda-ams-backups/pre-deployment/
        env:
          DB_USER: ${{ secrets.PROD_DB_USER }}
          DB_NAME: ${{ secrets.PROD_DB_NAME }}

      - name: Deploy to production
        run: |
          # Update image tag in deployment
          sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image-tag }}|g" k8s/deployment.yaml

          # Apply Kubernetes manifests with production config
          envsubst < k8s/configmap.yaml | kubectl apply -f -
          kubectl apply -f k8s/deployment.yaml

          # Perform rolling update
          kubectl rollout status deployment/rwanda-ams-app -n rwanda-ams --timeout=900s

      - name: Run production health checks
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app=rwanda-ams -n rwanda-ams --timeout=300s

          # Run comprehensive health checks
          npm run test:production-health

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          text: "Rwanda AMS successfully deployed to production! :rocket:"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # CLEANUP
  # ============================================================================

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Cleanup old images
        run: |
          # Keep last 10 images
          ghcr.io cleanup --keep 10 ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
